#!/usr/bin/env python

import sys
import logging
import signal

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)-8s %(message)s')
log = logging.getLogger('serial2tcp')

if __name__ == '__main__':
    from serial2tcp import Server, SerialAsync
    from argparse import ArgumentParser

    descr = 'WARNING: You have to allow connections only from the addresses' \
            'in the "--allow-list" option. e.g.' \
            '--allow-list="10.0.0.1, 172.16.0.1, 192.168.0.1"\n' \
            'NOTICE: This service supports only ' \
            'one tcp connection per instance.'

    usage = "USAGE: %(prog)s [options]\n\nSimple Serial to Network (TCP/IP)" \
            "redirector."

    parser = ArgumentParser(usage=usage, version='%(prog)s 0.5', description=descr)
    parser.add_argument(
        "-p", "--port", dest="serial",
        help="Serial port, a number, defualt = '/dev/tty0'", type=str, default='/dev/tty0'
    )
    parser.add_argument(
        "-b", "--baud", dest="baudrate",
        help="Baudrate, default 115200", default=115200, type=int
    )
    parser.add_argument(
        "-r", "--rtscts", dest="rtscts",
        help="Enable RTS/CTS flow control (default off)", action='store_true', default=False
    )
    parser.add_argument(
        "-x", "--xonxoff", dest="xonxoff",
        help="Enable software flow control (default off)", action='store_true', default=False
    )
    parser.add_argument(
        "-P", "--localport", dest="port",
        help="TCP/IP port on which to run the server (default 9100)", type=int, default=9100
    )
    parser.add_argument(
        "-l", "--listen", dest="listen",
        help="Listen address on which to run the server (default '127.0.0.1')", default='127.0.0.1'
    )
    parser.add_argument(
        '-A', '--acl', dest='acl', default="127.0.0.1", action='store', nargs='*', type=str, metavar='IP',
        help="List of IP addresses e.g '127.0.0.1, 192.168.0.2'"
    )

    options = parser.parse_args(sys.argv[1:])

    def signal_handler(signal, frame):
        sys.exit(0)

    try:
        ser = SerialAsync(baudrate=options.baudrate, port=options.serial, rtscts=options.rtscts, xonxoff=options.xonxoff)
    except Exception, e:
        log.fatal("Could not open serial port \"%s\": %s" % (options.serial, e))
        sys.exit(1)

    Server.SERIAL = ser
    srv = Server(use_acl=True if options.acl else False, host=options.listen, port=options.port)

    for ip in options.acl:
        srv.ACL.add(ip)

    signal.signal(signal.SIGINT, signal_handler)
    srv.serve_forever()